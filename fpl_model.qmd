---
title: "FPL modelling"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(fplscrapR)
library(tidymodels)
library(bayesian)
library(brms)
library(xgboost)
```

```{r}
diamond_dogs <- 3592433
leonard_nuthouse_id <- 755179

```

```{r}
#player_details <- get_player_details()
#save(player_details, file=  "player_details.Rdata")
  load("player_details.Rdata")
```

```{r}
pd2 <- player_details |>
  mutate(across(starts_with("expected"), as.numeric)) |>
  mutate(ict_index = as.numeric(ict_index))

pd2  <- pd2 |>
   group_by(element) |>
  arrange(kickoff_time) |>
  mutate(points_cat = case_when(total_points < 1 ~ "Zero",
                                total_points > 0 & total_points < 3 ~ "Blank",
                                total_points > 2 & total_points < 7 ~ "Return",
                                total_points > 6 ~ "Haul")) |>
  mutate(prev_points_1 = dplyr::lag(total_points, n = 1),
         prev_points_2 = dplyr::lag(total_points, n = 2),
         prev_points_3 = dplyr::lag(total_points, n = 3),
         prev_points_4 = dplyr::lag(total_points, n = 4),
         prev_points_5 = dplyr::lag(total_points, n = 5),
         
         
         prev_xG_1 = dplyr::lag(expected_goals, n = 1),
         prev_xG_2 = dplyr::lag(expected_goals, n = 2),
         prev_xG_3 = dplyr::lag(expected_goals, n = 3),
         prev_xG_4 = dplyr::lag(expected_goals, n = 4),
         prev_xG_5 = dplyr::lag(expected_goals, n = 5),
         
         prev_xGI_1 = dplyr::lag(expected_goal_involvements, n = 1),
         prev_xGI_2 = dplyr::lag(expected_goal_involvements, n = 2),
         prev_xGI_3 = dplyr::lag(expected_goal_involvements, n = 3),
         prev_xGI_4 = dplyr::lag(expected_goal_involvements, n = 4),
         prev_xGI_5 = dplyr::lag(expected_goal_involvements, n = 5),
         
         prev_xGC_1 = dplyr::lag(expected_goals_conceded, n = 1),
         prev_xGC_2 = dplyr::lag(expected_goals_conceded, n = 2),
         prev_xGC_3 = dplyr::lag(expected_goals_conceded, n = 3),
         prev_xGC_4 = dplyr::lag(expected_goals_conceded, n = 4),
         prev_xGC_5 = dplyr::lag(expected_goals_conceded, n = 5),   
         
         average_xG5 = mean(c(prev_xG_1, prev_xG_2, prev_xG_3, prev_xG_4, prev_xG_5)),
                  average_xGI5 = mean(c(prev_xGI_1, prev_xGI_2, prev_xGI_3, prev_xGI_4, prev_xGI_5)),
                           average_xGC5 = mean(c(prev_xGC_1, prev_xGC_2, prev_xGC_3, prev_xGC_4, prev_xGC_5)),
         
               average_points5 = mean(c(prev_points_1, prev_points_2, prev_points_3, prev_points_4, prev_points_5), na.rm = TRUE),
         prev_minutes_1 = dplyr::lag(minutes, n = 1),
         prev_minutes_2 = dplyr::lag(minutes, n = 2),
         prev_minutes_3 = dplyr::lag(minutes, n = 3),
         prev_minutes_4 = dplyr::lag(minutes, n = 4),
         prev_minutes_5 = dplyr::lag(minutes, n = 5),
         average_minutes5 = mean(c(prev_minutes_1, prev_minutes_2, prev_minutes_3, prev_minutes_4, prev_minutes_5), na.rm = TRUE),
         prev_ict = dplyr::lag(ict_index, n = 1),
         prev_value = dplyr::lag(value, n = 1),
         prev_starts = dplyr::lag(starts, n = 1),
         prev_selected = dplyr::lag(selected, n=1))
```

```{r}
#element_type in get_player_info is position
player_info <- get_player_info()

player_info_sel <- player_info |>
  select(playername, team_code, "position" = element_type)


```

```{r}
teams <- get_fdr() |> select("team_code" = code,
                             "team_name" = short_name,
                             "team_id" = id)
teams_opp <- teams |>
  rename("opp_team_name" = team_name)
```

```{r}
player_df <- left_join(pd2, player_info_sel) |> 
  left_join(teams, by = "team_code") |>
  left_join(teams_opp, by = c("opponent_team" = "team_id")) 

model_df <- player_df |>
  filter(round > 6) |>
  ungroup() |>
    filter(average_minutes5 > 30, selected > 15000) |>
  mutate(position = case_when(position == 1 ~ "GK", position == 2 ~ "DEF", position == 3 ~ "MID", position == 4 ~ "FWD")) |>
   mutate(was_home = factor(was_home)) |>
  mutate(prev_ict = as.numeric(prev_ict)) |>
  mutate(team_name = factor(team_name),
         opp_team_name = factor(opp_team_name))|>
  select(element,fixture, points_cat, round,playername, total_points, position, team_name, opp_team_name, was_home,  starts_with("prev"), starts_with("average")) 

```

```{r}
set.seed(123)
splits <- initial_split(model_df, prop = 0.8, strata = points_cat)

df_train <- training(splits)
df_test <- testing(splits)
```

```{r}
df_train2 <- df_train |> select(-playername, -element, -fixture, -total_points, - round)

xgb_recipe <- recipe(points_cat ~ ., data = df_train2) |> 
  step_center(all_numeric(), -all_outcomes()) |>
  step_scale(all_numeric(), -all_outcomes()) |> 
  step_dummy(all_nominal(), -all_outcomes())


```

```{r}
xgb_model <- boost_tree(
  tree_depth = 4,
  trees = 400,
  mtry = 0.5, 
) |>
  set_mode("classification") |>
  set_engine("xgboost", 
             objective = "multi:softprob",
             verbose = 2, 
             nthread = 4,
             counts = FALSE)
```

```{r}
#Set up workflow
xgb_wf <- workflow() |>
  add_model(xgb_model) |> 
  add_recipe(xgb_recipe)

```

```{r}
fitted_workflow <- fit(object = xgb_wf, data =  df_train2,
                         control = control_workflow(control_parsnip = control_parsnip(verbosity = 2L)))

```

```{r}
pred <- predict(fitted_workflow, df_test)

df_test$pred <- pred$.pred_class
df_test$points_cat <- factor(df_test$points_cat)


predtr <- predict(fitted_workflow, df_train)

df_train$pred <- predtr$.pred_class
df_train$points_cat <- factor(df_train$points_cat)

metrics(df_train, truth = points_cat, estimate = pred)
metrics(df_test, truth= points_cat, estimate = pred)
```

```{r}
conf_mat(df_test, truth= points_cat, estimate = pred)
```

\

```{r}
df_test |> ggplot(aes(x = total_points, y = pred)) +geom_point(alpha = 0.3) + geom_abline(slope = 1)
```

```{r}
xgb_model_ext <- extract_fit_engine(fitted_workflow)
varimp <- xgboost::xgb.importance(feature_names = fitted_workflow$fit$fit$fit$feature_names, 
                                        model = xgb_model_ext)
# Top 20 plot
varimp_plot <- varimp|>
  as_tibble() |>
  arrange(desc(Gain)) |>
  filter(row_number() <= 12) |>
  ggplot(aes(x = reorder(Feature, Gain), y = Gain, fill = Gain)) +
  geom_col() +
    geom_text(aes(label = round(Gain, 2)), nudge_y = 0.03) +
  coord_flip() +
  theme_minimal() +
  scale_fill_viridis_c()

varimp_plot
```

```{r}
# To improve:
# Add fixture difficulty stat
# create xP depending on if they are attackers or defenders e.g. xG x5 for midfielders
#create net xG/xGC
```
